{
  "name": "CODAP",
  "description": "Common Online Data Analysis Platform",
  "version": "2.0.0",
  "main": "apps/dg/index.html",
  "scripts": {
    "build:comment": "echo Usage: `npm run build` performs a local development build",
    "build": "npm run build:dev",
    "build:bundle": "npm run build:bundle-dev",
    "build:bundle-dev:comment": "echo Usage: `npm run build:bundle-dev` builds a development version of the `codap-lib-bundle.js`",
    "build:bundle-dev": "webpack",
    "build:bundle-prod:comment": "echo Usage: `npm run build:bundle-prod` builds a production version of the `codap-lib-bundle.js`",
    "build:bundle-prod": "NODE_ENV=production webpack --progress",
    "build:cfm:comment": "echo Usage: `npm run build:cfm` builds CFM for CODAP. Assumes that CFM repository named 'cloud-file-manager' and CODAP repository named 'codap' are siblings.",
    "build:cfm": "cd ../cloud-file-manager && npm run build:codap && cd ../codap && ./bin/recordCFMVersion",
    "build:dev:comment": "echo Usage: `npm run build:dev` performs a local development build",
    "build:dev": "npm run build:bundle-dev && npm run build:local",
    "build:embedded:comment": "echo Usage: `npm run build:embedded` builds a CODAP embedded mode package named embeddedCODAP",
    "build:embedded": "bin/makeCodapZip --root=embeddedCODAP --languages=en embeddedCODAP",
    "build:embedded-dev": "bin/makeCodapZip --root=embeddedCODAP --languages=en --minify=no embeddedCODAP",
    "build:extensions:comment": "echo Usage: npm run build:extensions target-dir",
    "build:extensions": "bin/makeExtn",
    "build:local:comment": "echo Usage: `npm run build:local` performs a local sproutcore build",
    "build:local": "sproutcore build -vv dg",
    "build:parser:comment": "echo Usage: `npm run build:parser` uses PEG.js to build the formula parser from the grammar",
    "build:parser": "pegjs --cache --export-var 'DG.formulaParser' 'apps/dg/formula/formulaGrammar.pegjs' 'apps/dg/formula/formulaParser.js'",
    "build:production:comment": "Usage: `npm run build:production` performs a local production build",
    "build:production": "npm run build:bundle-prod && npm run build:local",
    "build:travis": "npm run build:bundle-prod && bin/makeCodapZip --languages=en travis",
    "clean": "npm-run-all clean:tmp clean:bundle",
    "clean:all": "npm-run-all clean:tmp clean:bundle clean:dependencies",
    "clean:bundle": "rimraf apps/dg/resources/build",
    "clean:dependencies": "npm-run-all clean:node_modules sync:install",
    "clean:node_modules": "rimraf node_modules",
    "clean:tmp": "rimraf tmp",
    "clean-and-build": "clear && npm run clean && npm run build:bundle-prod && npm run build:local",
    "clean-and-serve": "clear && npm run clean && npm run build:bundle-dev && npm run codap",
    "cloudfront:invalidations": "s3cmd cfinvalinfo cf://E6OL76123FRO6",
    "cloudfront:inval-root": "aws cloudfront create-invalidation --distribution-id E6OL76123FRO6 --paths /index.html",
    "codap:comment": "echo Usage: `npm run codap` launches sc-server. Point browser at http://localhost:4020/dg or `npm run open:dev`.",
    "codap": "sproutcore server --allow-from-ips='*.*.*.*'",
    "deploy:dev:comment": "echo Usage: `npm run deploy:dev -- {deployName}` builds and deploys CODAP to 'https://codap.concord.org/~user/deployName'",
    "deploy:dev": "npm run build:bundle-dev && ./bin/deployDevCodap",
    "link:slate": "npm link @concord-consortium/slate-editor",
    "lint": "eslint --ext .json,.js apps",
    "lint:fix:comment": "echo Usage: `npm run lint:fix` runs ESLint configured to fix issues that can be fixed automatically, e.g. missing semicolons.",
    "lint:fix": "eslint --fix *.js apps",
    "open:dev": "opener http://localhost:4020/dg",
    "open:staging": "opener http://codap.concord.org/releases/staging",
    "open:production": "opener http://codap.concord.org/releases/latest",
    "prebuild:bundle": "npm run lint",
    "prebuild:production": "npm run lint",
    "predeploy:dev": "npm run test",
    "prepush": "npm run test",
    "pretest": "npm run lint",
    "pt:accepted-between:comment": "echo Usage: `npm run pt:accepted-between date1 date2` Prints accepted stories for interval",
    "pt:accepted-between": "bin/pt-accepted-between",
    "pt:make-release-story": "bin/pt-make-release-story",
    "push:comment": "echo Usage: `npm run push` pushes local commits on the current branch to the remote origin, setting up the tracking branch if necessary.",
    "push": "git push --set-upstream origin HEAD",
    "start": "npm run codap",
    "start:sync": "npm-run-all sync start",
    "strings:build": "./bin/strings-build.sh",
    "strings:pull:usage": "echo Usage: `npm run strings:pull -- -a <poeditor_api_key>`",
    "strings:pull": "./bin/strings-pull-project.sh",
    "strings:push:usage": "echo Usage: `npm run strings:push -- -a <poeditor_api_key>`",
    "strings:push": "./bin/strings-push-project.sh",
    "sync:comment": "echo Usage: `npm run sync` updates submodules, dependencies, and the bundle",
    "sync": "npm-run-all clean sync:submodules sync:dependencies",
    "sync:all:comment": "echo Usage: `npm run sync:all` pulls latest code and updates submodules, dependencies, and the bundle",
    "sync:all": "npm-run-all clean:all sync:code sync:submodules sync:dependencies",
    "sync:code": "git pull",
    "sync:dependencies": "npm-run-all sync:install build:bundle",
    "sync:install": "npm install",
    "sync:submodules": "git submodule update --init",
    "test:gui:comment": "echo Usage: `npm run test:gui` opens the default browser to the DG unit tests. Requires that sc-server be running.",
    "test:gui": "opener http://localhost:4020/dg/en/current/tests.html",
    "test:comment": "echo Usage: `npm run test` or `npm test` runs DG unit tests via PhantomJS.",
    "test": "bin/test_runner",
    "test:cypress": "cypress run --config video=false,defaultCommandTimeout=10000 --env testEnv=local,failOnSnapshotDiff=false",
    "test:cypress:branch": "cypress run --config video=false,defaultCommandTimeout=10000 --env testEnv=branch,failOnSnapshotDiff=false",
    "test:cypress:staging": "cypress run --config video=false,defaultCommandTimeout=10000 --env testEnv=staging,failOnSnapshotDiff=true --browser chrome --headless",
    "test:full": "npm-run-all test test:cypress",
    "test:production": "cypress open --env testEnv=production,failOnSnapshotDiff=false",
    "test:staging": "cypress open --env testEnv=staging,failOnSnapshotDiff=false",
    "test:branch": "cypress open --env testEnv=branch,failOnSnapshotDiff=false",
    "test:local": "cypress open --env testEnv=local,failOnSnapshotDiff=false",
    "unlink:slate": "npm uninstall --no-save @concord-consortium/slate-editor && npm install",
    "test:cypress:staging:single": "cypress run --config video=true,defaultCommandTimeout=10000 --env testEnv=staging,failOnSnapshotDiff=false --browser chrome --headless --spec 'cypress/integration/graph_ruler_test.js'"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/concord-consortium/codap.git"
  },
  "author": "Concord Consortium",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/concord-consortium/codap/issues"
  },
  "homepage": "http://codap.concord.org/",
  "devDependencies": {
    "css-loader": "^3.4.2",
    "cypress": "^4.12.1",
    "cypress-commands": "^0.3.1",
    "cypress-file-upload": "^3.5.0",
    "cypress-image-snapshot": "^3.1.1",
    "eslint": "^6.1.0",
    "eslint-plugin-json": "^2.1.1",
    "eslint-plugin-react": "^7.19.0",
    "eslint-plugin-react-hooks": "^2.5.1",
    "mini-css-extract-plugin": "0.9.0",
    "npm-run-all": "^4.1.5",
    "opener": "^1.4.3",
    "pegjs": "=0.7.0",
    "phantomjs-prebuilt": "^2.1.16",
    "rimraf": "^3.0.2",
    "string-replace-loader": "^2.3.0",
    "strip-json-comments-cli": "^1.0.1",
    "style-loader": "^0.21.0",
    "webpack": "^4.42.1",
    "webpack-cli": "^3.3.10",
    "webpack-shell-plugin": "^0.5.0"
  },
  "dependencies": {
    "@concord-consortium/slate-editor": "^0.5.0",
    "codemirror": "^5.39.2",
    "create-react-class": "^15.7.0",
    "dayjs": "^1.8.14",
    "es5-shim": "^4.5.14",
    "es6-shim": "^0.35.5",
    "esri-leaflet": "^2.2.1",
    "leaflet": "1.0.0",
    "lodash": "^4.17.19",
    "nanoid": "^2.0.1",
    "pluralize": "^4.0.0",
    "popper.js": "^1.14.3",
    "prop-types": "^15.7.2",
    "random-variate-generators": "^1.5.1",
    "react": "^16.13.1",
    "react-dom": "^16.13.1",
    "react-dom-factories": "^1.0.2",
    "react-sizeme": "^2.6.12",
    "rtree": "^1.4.2",
    "tooltip.js": "^1.2.0"
  }
}
