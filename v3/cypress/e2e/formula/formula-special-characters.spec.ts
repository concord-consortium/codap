import { FormulaHelper as fh } from "../../support/helpers/formula-helper"
import { TableTileElements as table } from "../../support/elements/table-tile"

context("Formula Engine", () => {
  describe("Special Characters in Formula Tests", () => {
    it("Check backtick in symbol name", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x`yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      table.addFormula("Formula1", "`x\\`yz`+1")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula`1")
      table.checkFormulaExists("Formula2", "`Formula\\`1`+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check backslash symbol in attribute", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x\\yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      table.addFormula("Formula1", "`x\\yz`+1")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula\\1")
      table.checkFormulaExists("Formula2", "`Formula\\\\1`+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check backslash and backtick symbols in attribute", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x\\`yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      table.addFormula("Formula1", "`x\\\\\\`yz`+1")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula\\`1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check single quote symbol in attribute", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x'yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      table.addFormula("Formula1", "`x'yz`+1")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula'1")
      table.checkFormulaExists("Formula2", "`Formula'1`+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check double quotes symbol in attribute", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x\"yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      table.addFormula("Formula1", "`x\"yz`+1")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula\"1")
      table.checkFormulaExists("Formula2", "`Formula\"1`+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check backslash and double quotes symbols in attribute", () => {
      fh.visitURL("?sample=four")
      table.renameAttribute("b", "x\\\"yz")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula1")
      // must add {del} to delete auto-matched (in error) closing quote
      table.addFormula("Formula1", "`x\\\"yz`+1{del}")
      table.verifyFormulaValues("Formula1", [2, 2, 2, 1, 1])
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula2")
      table.addFormula("Formula2", "Formula1+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
      table.renameAttribute("Formula1", "Formula\\\"1")
      table.checkFormulaExists("Formula2", "`Formula\\\\\"1`+1")
      table.verifyFormulaValues("Formula2", [3, 3, 3, 2, 2])
    })
    it("Check double quote in string constant", () => {
      fh.visitURL("?sample=four")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula")
      table.addFormula("Formula", "if(b = 1, \"o\\\"k\", \"ok\")")
      table.verifyFormulaValues("Formula", ["o\"k", "o\"k", "o\"k", "ok", "ok"])
      table.editFormula("Formula", "if(b = 1, \"o\\\\k\", \"ok\")")
      table.verifyFormulaValues("Formula", ["o\\k", "o\\k", "o\\k", "ok", "ok"])
      table.editFormula("Formula", "if(b = 1, \"o\\\\\\\"k\", \"ok\")")
      table.verifyFormulaValues("Formula", ["o\\\"k", "o\\\"k", "o\\\"k", "ok", "ok"])
    })
    it("Check double quote in symbol name", () => {
      fh.visitURL("?sample=four")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula")
      table.addFormula("Formula", "lookupByIndex(\"Four\", \"b\", caseIndex)")
      table.renameAttribute("b", "x'yz")
      table.checkFormulaExists("Formula", "lookupByIndex(\"Four\", \"x'yz\", caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
      table.renameAttribute("x'yz", "x\"yz")
      table.checkFormulaExists("Formula", "lookupByIndex(\"Four\", \"x\\\"yz\", caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
      table.renameAttribute("x\\\"yz", "x\\yz")
      table.checkFormulaExists("Formula", "lookupByIndex(\"Four\", \"x\\\\yz\", caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
    })
    it("Check single quote in string constant", () => {
      fh.visitURL("?sample=four")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula")
      table.addFormula("Formula", "if(b = 1, 'ok', 'not ok')")
      table.verifyFormulaValues("Formula", ["ok", "ok", "ok", "not ok", "not ok"])
      table.editFormula("Formula", "if(b = 1, 'o\"k', 'not ok')")
      table.verifyFormulaValues("Formula", ["o\"k", "o\"k", "o\"k", "not ok", "not ok"])
      table.editFormula("Formula", "if(b = 1, 'o\\'k', 'not ok')")
      table.verifyFormulaValues("Formula", ["o'k", "o'k", "o'k", "not ok", "not ok"])
      table.editFormula("Formula", "if(b = 1, 'o\\\\k', 'not ok')")
      table.verifyFormulaValues("Formula", ["o\\k", "o\\k", "o\\k", "not ok", "not ok"])
    })
    it("Check single quote in symbol name", () => {
      fh.visitURL("?sample=four")
      table.addNewAttribute()
      table.renameAttribute("newAttr", "Formula")
      table.addFormula("Formula", "lookupByIndex('Four', 'b', caseIndex)")
      table.renameAttribute("b", "x'yz")
      table.checkFormulaExists("Formula", "lookupByIndex('Four', 'x\\'yz', caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
      table.renameAttribute("x'yz", "x\"yz")
      table.checkFormulaExists("Formula", "lookupByIndex('Four', 'x\"yz', caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
      table.renameAttribute("x\\\"yz", "x\\yz")
      table.checkFormulaExists("Formula", "lookupByIndex('Four', 'x\\\\yz', caseIndex)")
      table.verifyFormulaValues("Formula", [1, 1, 1, "", ""])
    })
  })
})
