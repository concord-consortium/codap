diff --git a/node_modules/@dnd-kit/core/dist/core.cjs.development.js b/node_modules/@dnd-kit/core/dist/core.cjs.development.js
index c07336f..8a241b0 100644
--- a/node_modules/@dnd-kit/core/dist/core.cjs.development.js
+++ b/node_modules/@dnd-kit/core/dist/core.cjs.development.js
@@ -1790,10 +1790,6 @@ function useAutoScroller(_ref) {
     }
 
     for (const scrollContainer of sortedScrollableAncestors) {
-      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
-        continue;
-      }
-
       const index = scrollableAncestors.indexOf(scrollContainer);
       const scrollContainerRect = scrollableAncestorRects[index];
 
@@ -1806,6 +1802,10 @@ function useAutoScroller(_ref) {
         speed
       } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
 
+      if ((canScroll == null ? void 0 : canScroll(scrollContainer, direction)) === false) {
+        continue;
+      }
+
       for (const axis of ['x', 'y']) {
         if (!scrollIntent[axis][direction[axis]]) {
           speed[axis] = 0;
diff --git a/node_modules/@dnd-kit/core/dist/core.esm.js b/node_modules/@dnd-kit/core/dist/core.esm.js
index ed699d9..6aa2da3 100644
--- a/node_modules/@dnd-kit/core/dist/core.esm.js
+++ b/node_modules/@dnd-kit/core/dist/core.esm.js
@@ -1789,10 +1789,6 @@ function useAutoScroller(_ref) {
     }
 
     for (const scrollContainer of sortedScrollableAncestors) {
-      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
-        continue;
-      }
-
       const index = scrollableAncestors.indexOf(scrollContainer);
       const scrollContainerRect = scrollableAncestorRects[index];
 
@@ -1805,6 +1801,10 @@ function useAutoScroller(_ref) {
         speed
       } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
 
+      if ((canScroll == null ? void 0 : canScroll(scrollContainer, direction)) === false) {
+        continue;
+      }
+
       for (const axis of ['x', 'y']) {
         if (!scrollIntent[axis][direction[axis]]) {
           speed[axis] = 0;
@@ -2353,18 +2353,10 @@ function useRects(elements, measure) {
   const resizeObserver = useResizeObserver({
     callback: measureRects
   });
-
-  if (elements.length > 0 && rects === defaultValue$2) {
-    measureRects();
-  }
-
   useIsomorphicLayoutEffect(() => {
-    if (elements.length) {
-      elements.forEach(element => resizeObserver == null ? void 0 : resizeObserver.observe(element));
-    } else {
-      resizeObserver == null ? void 0 : resizeObserver.disconnect();
-      measureRects();
-    }
+    resizeObserver == null ? void 0 : resizeObserver.disconnect();
+    measureRects();
+    elements.forEach(element => resizeObserver == null ? void 0 : resizeObserver.observe(element));
   }, [elements]);
   return rects;
 
diff --git a/node_modules/@dnd-kit/core/dist/hooks/utilities/useAutoScroller.d.ts b/node_modules/@dnd-kit/core/dist/hooks/utilities/useAutoScroller.d.ts
index 3159f04..01f66e3 100644
--- a/node_modules/@dnd-kit/core/dist/hooks/utilities/useAutoScroller.d.ts
+++ b/node_modules/@dnd-kit/core/dist/hooks/utilities/useAutoScroller.d.ts
@@ -1,3 +1,4 @@
+import { Direction } from '../../types';
 import type { Coordinates, ClientRect } from '../../types';
 export declare type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];
 export declare enum AutoScrollActivator {
@@ -28,10 +29,14 @@ interface Arguments extends Options {
     scrollableAncestorRects: ClientRect[];
     delta: Coordinates;
 }
-export declare type CanScroll = (element: Element) => boolean;
+export declare type CanScroll = (element: Element, direction: ScrollDirection) => boolean;
 export declare enum TraversalOrder {
     TreeOrder = 0,
     ReversedTreeOrder = 1
 }
+interface ScrollDirection {
+    x: 0 | Direction;
+    y: 0 | Direction;
+}
 export declare function useAutoScroller({ acceleration, activator, canScroll, draggingRect, enabled, interval, order, pointerCoordinates, scrollableAncestors, scrollableAncestorRects, delta, threshold, }: Arguments): void;
 export {};
