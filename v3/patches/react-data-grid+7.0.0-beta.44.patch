diff --git a/node_modules/react-data-grid/lib/bundle.cjs b/node_modules/react-data-grid/lib/bundle.cjs
index 43bf414..635934c 100644
--- a/node_modules/react-data-grid/lib/bundle.cjs
+++ b/node_modules/react-data-grid/lib/bundle.cjs
@@ -764,7 +764,7 @@ function useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gri
       return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;
     });
   }
-  function handleColumnResize(column, nextWidth) {
+  function handleColumnResize(column, nextWidth, isComplete = false) {
     const {
       key: resizingKey
     } = column;
@@ -793,7 +793,7 @@ function useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gri
       });
       updateMeasuredWidths(columnsToMeasure);
     });
-    onColumnResize?.(column.idx, measuredWidth);
+    onColumnResize?.(column.idx, measuredWidth, isComplete);
   }
   return {
     gridTemplateColumns,
@@ -1373,6 +1373,7 @@ function HeaderCell({
       left
     } = headerCell.getBoundingClientRect();
     const offset = isRtl ? event.clientX - left : right - event.clientX;
+    let lastWidth = 0;
     function onPointerMove(event) {
       const {
         right,
@@ -1380,10 +1381,14 @@ function HeaderCell({
       } = headerCell.getBoundingClientRect();
       const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;
       if (width > 0) {
-        onColumnResize(column, clampColumnWidth(width, column));
+        lastWidth = clampColumnWidth(width, column);
+        onColumnResize(column, lastWidth);
       }
     }
     function onLostPointerCapture() {
+      if (lastWidth > 0) {
+        onColumnResize(column, lastWidth, true);
+      }
       currentTarget.removeEventListener('pointermove', onPointerMove);
       currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);
     }
@@ -1433,7 +1438,7 @@ function HeaderCell({
     }
   }
   function onDoubleClick() {
-    onColumnResize(column, 'max-content');
+    onColumnResize(column, 'max-content', true);
   }
   function handleFocus(event) {
     onFocus?.(event);
@@ -1991,6 +1996,7 @@ function DataGrid(props, ref) {
     rowHeight: rawRowHeight,
     headerRowHeight: rawHeaderRowHeight,
     summaryRowHeight: rawSummaryRowHeight,
+    columnWidths: rawColumnWidths,
     selectedRows,
     onSelectedRowsChange,
     sortColumns,
@@ -2033,15 +2039,15 @@ function DataGrid(props, ref) {
   const direction = rawDirection ?? 'ltr';
   const [scrollTop, setScrollTop] = react.useState(0);
   const [scrollLeft, setScrollLeft] = react.useState(0);
-  const [resizedColumnWidths, setResizedColumnWidths] = react.useState(() => new Map());
+  const [resizedColumnWidths, setResizedColumnWidths] = react.useState(() => new Map(rawColumnWidths));
   const [measuredColumnWidths, setMeasuredColumnWidths] = react.useState(() => new Map());
   const [copiedCell, setCopiedCell] = react.useState(null);
   const [isDragging, setDragging] = react.useState(false);
   const [draggedOverRowIdx, setOverRowIdx] = react.useState(undefined);
   const [scrollToPosition, setScrollToPosition] = react.useState(null);
   const getColumnWidth = react.useCallback(column => {
-    return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;
-  }, [measuredColumnWidths, resizedColumnWidths]);
+    return rawColumnWidths?.get(column.key) ?? resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;
+  }, [measuredColumnWidths, rawColumnWidths, resizedColumnWidths]);
   const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();
   const {
     columns,
@@ -3322,5 +3328,6 @@ exports.renderSortPriority = renderSortPriority;
 exports.renderToggleGroup = renderToggleGroup;
 exports.renderValue = renderValue;
 exports.textEditor = textEditor;
+exports.textEditorClassname = textEditorClassname;
 exports.useRowSelection = useRowSelection;
 //# sourceMappingURL=bundle.cjs.map
diff --git a/node_modules/react-data-grid/lib/bundle.js b/node_modules/react-data-grid/lib/bundle.js
index 0214c29..60b4932 100644
--- a/node_modules/react-data-grid/lib/bundle.js
+++ b/node_modules/react-data-grid/lib/bundle.js
@@ -760,7 +760,7 @@ function useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gri
       return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;
     });
   }
-  function handleColumnResize(column, nextWidth) {
+  function handleColumnResize(column, nextWidth, isComplete = false) {
     const {
       key: resizingKey
     } = column;
@@ -789,7 +789,7 @@ function useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gri
       });
       updateMeasuredWidths(columnsToMeasure);
     });
-    onColumnResize?.(column.idx, measuredWidth);
+    onColumnResize?.(column.idx, measuredWidth, isComplete);
   }
   return {
     gridTemplateColumns,
@@ -1369,6 +1369,7 @@ function HeaderCell({
       left
     } = headerCell.getBoundingClientRect();
     const offset = isRtl ? event.clientX - left : right - event.clientX;
+    let lastWidth = 0;
     function onPointerMove(event) {
       const {
         right,
@@ -1376,10 +1377,14 @@ function HeaderCell({
       } = headerCell.getBoundingClientRect();
       const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;
       if (width > 0) {
-        onColumnResize(column, clampColumnWidth(width, column));
+        lastWidth = clampColumnWidth(width, column);
+        onColumnResize(column, lastWidth);
       }
     }
     function onLostPointerCapture() {
+      if (lastWidth > 0) {
+        onColumnResize(column, lastWidth, true);
+      }
       currentTarget.removeEventListener('pointermove', onPointerMove);
       currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);
     }
@@ -1429,7 +1434,7 @@ function HeaderCell({
     }
   }
   function onDoubleClick() {
-    onColumnResize(column, 'max-content');
+    onColumnResize(column, 'max-content', true);
   }
   function handleFocus(event) {
     onFocus?.(event);
@@ -1987,6 +1992,7 @@ function DataGrid(props, ref) {
     rowHeight: rawRowHeight,
     headerRowHeight: rawHeaderRowHeight,
     summaryRowHeight: rawSummaryRowHeight,
+    columnWidths: rawColumnWidths,
     selectedRows,
     onSelectedRowsChange,
     sortColumns,
@@ -2029,15 +2035,15 @@ function DataGrid(props, ref) {
   const direction = rawDirection ?? 'ltr';
   const [scrollTop, setScrollTop] = useState(0);
   const [scrollLeft, setScrollLeft] = useState(0);
-  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map());
+  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map(rawColumnWidths));
   const [measuredColumnWidths, setMeasuredColumnWidths] = useState(() => new Map());
   const [copiedCell, setCopiedCell] = useState(null);
   const [isDragging, setDragging] = useState(false);
   const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);
   const [scrollToPosition, setScrollToPosition] = useState(null);
   const getColumnWidth = useCallback(column => {
-    return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;
-  }, [measuredColumnWidths, resizedColumnWidths]);
+    return rawColumnWidths?.get(column.key) ?? resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;
+  }, [measuredColumnWidths, rawColumnWidths, resizedColumnWidths]);
   const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();
   const {
     columns,
@@ -3303,5 +3309,5 @@ function textEditor({
   });
 }

-export { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, TreeDataGrid$1 as TreeDataGrid, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, useRowSelection };
+export { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, TreeDataGrid$1 as TreeDataGrid, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, textEditorClassname, useRowSelection };
 //# sourceMappingURL=bundle.js.map
diff --git a/node_modules/react-data-grid/lib/index.d.ts b/node_modules/react-data-grid/lib/index.d.ts
index 4b927bd..c6ffa4e 100644
--- a/node_modules/react-data-grid/lib/index.d.ts
+++ b/node_modules/react-data-grid/lib/index.d.ts
@@ -196,6 +196,10 @@ export declare interface DataGridProps<R, SR = unknown, K extends Key = Key> ext
      * @default 35
      */
     summaryRowHeight?: Maybe<number>;
+    /**
+     * The client-managed width of each column in pixels
+     */
+    columnWidths?: Maybe<ReadonlyMap<string, number>>;
     /**
      * Feature props
      */
@@ -225,7 +229,7 @@ export declare interface DataGridProps<R, SR = unknown, K extends Key = Key> ext
     /** Called when the grid is scrolled */
     onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;
     /** Called when a column is resized */
-    onColumnResize?: Maybe<(idx: number, width: number) => void>;
+    onColumnResize?: Maybe<(idx: number, width: number, isComplete?: boolean) => void>;
     /** Called when a column is reordered */
     onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;
     /**
@@ -439,6 +443,8 @@ export declare type SortDirection = 'ASC' | 'DESC';

 export declare function textEditor<TRow, TSummaryRow>({ row, column, onRowChange, onClose }: RenderEditCellProps<TRow, TSummaryRow>): JSX_2.Element;

+export declare const textEditorClassname: string;
+
 export declare function ToggleGroup<R, SR>({ groupKey, isExpanded, tabIndex, toggleGroup }: RenderGroupCellProps<R, SR>): JSX_2.Element;

 export declare const TreeDataGrid: <R, SR = unknown, K extends Key = Key>(props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>) => JSX.Element;
