import { MappedStringArray } from "./mapped-string-array"

describe("MappedArray", () => {
  it("works as expected", () => {
    const mappedArray = new MappedStringArray(["a", "b", "c", "d", "e"])
    expect(mappedArray.getValue(0)).toBe("a")
    expect(mappedArray.getValue(1)).toBe("b")
    expect(mappedArray.getValue(2)).toBe("c")
    expect(mappedArray.getValue(3)).toBe("d")
    expect(mappedArray.getValue(4)).toBe("e")
    expect(mappedArray.getIndex("a")).toBe(0)
    expect(mappedArray.getIndex("b")).toBe(1)
    expect(mappedArray.getIndex("c")).toBe(2)
    expect(mappedArray.getIndex("d")).toBe(3)
    expect(mappedArray.getIndex("e")).toBe(4)
    expect(mappedArray.length).toBe(5)

    mappedArray.moveValueAfter("c", "a")
    expect(mappedArray.getValue(0)).toBe("a")
    expect(mappedArray.getValue(1)).toBe("c")
    expect(mappedArray.getValue(2)).toBe("b")
    expect(mappedArray.getValue(3)).toBe("d")
    expect(mappedArray.getValue(4)).toBe("e")
    expect(mappedArray.getIndex("a")).toBe(0)
    expect(mappedArray.getIndex("b")).toBe(2)
    expect(mappedArray.getIndex("c")).toBe(1)
    expect(mappedArray.getIndex("d")).toBe(3)
    expect(mappedArray.getIndex("e")).toBe(4)
    expect(mappedArray.length).toBe(5)

    mappedArray.moveValueBefore("d", "b")
    expect(mappedArray.getValue(0)).toBe("a")
    expect(mappedArray.getValue(1)).toBe("c")
    expect(mappedArray.getValue(2)).toBe("d")
    expect(mappedArray.getValue(3)).toBe("b")
    expect(mappedArray.getValue(4)).toBe("e")
    expect(mappedArray.getIndex("a")).toBe(0)
    expect(mappedArray.getIndex("b")).toBe(3)
    expect(mappedArray.getIndex("c")).toBe(1)
    expect(mappedArray.getIndex("d")).toBe(2)
    expect(mappedArray.getIndex("e")).toBe(4)
    expect(mappedArray.length).toBe(5)

    mappedArray.moveValueAfter("c", "b")
    expect(mappedArray.getValue(0)).toBe("a")
    expect(mappedArray.getValue(1)).toBe("d")
    expect(mappedArray.getValue(2)).toBe("b")
    expect(mappedArray.getValue(3)).toBe("c")
    expect(mappedArray.getValue(4)).toBe("e")
    expect(mappedArray.getIndex("a")).toBe(0)
    expect(mappedArray.getIndex("b")).toBe(2)
    expect(mappedArray.getIndex("c")).toBe(3)
    expect(mappedArray.getIndex("d")).toBe(1)
    expect(mappedArray.getIndex("e")).toBe(4)
    expect(mappedArray.length).toBe(5)

    mappedArray.moveValueAfter("d", "c")
    expect(mappedArray.getValue(0)).toBe("a")
    expect(mappedArray.getValue(1)).toBe("b")
    expect(mappedArray.getValue(2)).toBe("c")
    expect(mappedArray.getValue(3)).toBe("d")
    expect(mappedArray.getValue(4)).toBe("e")
    expect(mappedArray.getIndex("a")).toBe(0)
    expect(mappedArray.getIndex("b")).toBe(1)
    expect(mappedArray.getIndex("c")).toBe(2)
    expect(mappedArray.getIndex("d")).toBe(3)
    expect(mappedArray.getIndex("e")).toBe(4)
    expect(mappedArray.length).toBe(5)

    expect(mappedArray.moveValueAfter("a", "a")).toBeUndefined()
    expect(mappedArray.moveValueBefore("a", "a")).toBeUndefined()
    expect(mappedArray.moveValueAfter("b", "a")).toBeUndefined()
    expect(mappedArray.moveValueBefore("a", "b")).toBeUndefined()
    expect(mappedArray.length).toBe(5)
  })
})
